
사원들의 업무별 전체 급여 평균이 $10,000보다 큰 경우를 조회하여 업무, 급여 평균을 출력하시오. 
단 업무에 사원(CLERK)이 포함된 경우는 제외하고 전체 급여 평균이 높은 순서대로 출력하시오.
>SELECT job_id , avg(salary) as 'AVG salary'

FROM hr.employees

where job_id not like '%clerrk%'

group by job_id

having avg(salary) >=10000

order by avg(salary) desc
 ;

[6] 각 이름이 ‘s’로 끝나는 사원들의 이름과 업무를 아래의 예와 같이 출력하고자 한다. 
출력 시 성과 이름은 첫 글자가 대문자, 업무는 모두 대문자로 출력하고 머리글은 Employee JOBs로 표시하시오.
	□예 Sigal Tobias is a PU_CLERK
select concat( first_name ,' ', last_name,' is a ',UPPER(job_id)) as 'Emplyee JOBs' 

from hr.employees

where last_name Like '%S';
== 같은 결과 where substr(last_name,-1,1) ='s';


(7)모든 사원의 연봉을 표시하는 보고서를 작성하려고 한다. 
보고서에 사원의 성과 이름(Name으로 별칭), 급여, 수당여부에 따른 연봉을 포함하여 출력하시오. 
수당여부는 수당이 있으면 “Salary + Commission”, 수당이 없으면 “Salary only”라고 표시하고, 별칭은 적절히 붙인다. 
또한 출력 시 연봉이 높은 순으로 정렬한다.

SELECT concat(first_name, ' ', last_name) as 'Name'
	, salary
    , (salary * 12) + (salary * 12 * IFNULL(commission_pct, 0)) as 'Annual Salary'
    , IF(commission_pct IS NOT NULL, 'Salary + Commission', 'Salary Only') as 'Salary Type'
FROM employees
ORDER BY salary DESC;

[8] 모든 사원들 성과 이름(Name으로 별칭), 입사일 그리고 입사일이 어떤 요일이였는지 출력하시오.
 이때 주(week)의 시작인 일요일부터 출력되도록 정렬하시오.
W/w차이 
select concat( first_name ,' ', last_name) as 'name',
hire_date,
date_format(hire_date, '%W') AS 'DAY OF THE WEEK'

from hr.employees

order by date_format(hire_date, '%w');




select date_format(hire_date,'%w')as  'day of the week'
,
count(date_format(hire_date,'%w')) as 'count'

from employees
group by 1;


[9] 모든 사원은 직속 상사 및 직속 직원을 갖는다. 단, 최상위 또는 최하위 직원은 직속상사 및 직원이 없다. 
소속된 사원들 중 어떤 사원의 상사로 근무 중인 사원의 총 수를 출력하시오.

부사장의 경우는 자기와 사장이 100이므로 중복 데이터는 없앤다
 
select  count(distinct manager_id) 

from hr.employees
;

[10] 각 사원이 소속된 부서별로 급여 합계, 급여 평균, 급여 최대값, 급여 최소값을 집계하고자 한다. 
계산된 출력값은 6자리와 세 자리 구분기호, $ 표시와 함께 출력하고 부서번호의 오름차순 정렬하시오. 
단, 부서에 소속되지 않은 사원에 대한 정보는 제외하고 출력시 머리글은 칭(alias) 처리하시오.

 GROUP BY, SUM(), AVG(), MAX(), MIN()
	- FORMAT(값, 소수점 표현자리수)
select department_id
	, count(department_id) as 'COUNT'
	, concat('$', FORMAT(sum(salary), 0)) as 'Sum Salary'
    , concat('$', FORMAT(avg(salary), 2)) as 'Avg Salary'
    , concat('$', FORMAT(max(salary), 0)) as 'Max Salary'
    , concat('$', FORMAT(min(salary), 0)) as 'Min Salary'
from employees
where department_id is not null
group by department_id;	



join 
,
join (inner/ outer(left,right,full)
 
,를 사용하면 where 에서 조인
from 테이블 1 inner join 테이블 2
where 조건

select employees.employee_id,employees.first_name, employees.last_name ,
departments.department_id
,departments.department_name
from employees ,departments
where employees.department_id = departments.department_id

order by employee_id;

select employees.employee_id,employees.first_name, employees.last_name ,
departments.department_id
,departments.department_name

from employees join departments
on employees.department_id = departments.department_id

order by employee_id;


select emp.employee_id,
emp.first_name, 
emp.last_name
 ,
dept.department_id
,dept.department_name

from employees as emp left outer join departments as dept

on emp.department_id = dept.department_id

order by emp.employee_id;



자기가 자기를 참고 self join
select emp1.employee_id 
,
concat(emp1.first_name,' ',emp1.last_name )as name
,
concat(emp2.first_name,' ',emp2.last_name )as 'manager'

from employees emp1 left outer join employees emp2
 
on emp1.employee_id =emp2.employee_id
;






